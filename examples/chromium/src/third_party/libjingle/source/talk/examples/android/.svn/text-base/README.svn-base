This directory contains an example Android client for http://apprtc.appspot.com 

Prerequisites:
- Make sure gclient is checking out tools necessary to target Android: your
  .gclient file should contain a line like:
  target_os = ['android', 'unix']
  Make sure to re-run gclient sync after adding this to download the tools.
- Env vars need to be set up to target Android; easiest way to do this is to run
  (from the libjingle trunk directory):
  . ./build/android/envsetup.sh
  Note that this clobbers any previously-set $GYP_DEFINES so it must be done
  before the next item.
- Set up webrtc-related GYP variables:
  export GYP_DEFINES="build_with_libjingle=1 build_with_chromium=0 libjingle_java=1 $GYP_DEFINES"
  export JAVA_HOME=</path/to/JDK>
  export PATH=$JAVA_HOME/bin:$PATH
  To cause WEBRTC_LOGGING to emit to Android's logcat, add enable_tracing=1 to
  the $GYP_DEFINES above.
- When targeting both desktop & android, make sure to use a different output_dir
  value in $GYP_GENERATOR_FLAGS or you'll likely end up with mismatched ARM &
  x86 output artifacts.  If you use an output_dir other than out/ make sure to
  modify the command-lines below appropriately.
- Finally, run "gclient runhooks" to generate Android-targeting .ninja files.

Example of building & using the app:

cd <path/to/libjingle>/trunk
ninja -C out/Debug libjingle_peerconnection_test_jar
cd talk/examples/android
cp ../../../out/Debug/libjingle_peerconnection.jar libs/
<path/to/android-ndk-r8d>/toolchains/arm-linux-androideabi-4.6/prebuilt/linux-x86/bin/arm-linux-androideabi-strip -o libs/armeabi-v7a/libjingle_peerconnection_so.so  ../../../out/Debug/libjingle_peerconnection_so.so
ant debug
adb install -r bin/AppRTCDemo-debug.apk
adb shell am force-stop org.appspot.apprtc

In desktop chrome, navigate to http://apprtc.appspot.com and note the r=<NNN> room
number in the resulting URL, and replace it into the following command:

adb shell am start -a android.intent.action.VIEW -d '"https://apprtc.appspot.com/?r=<NNN>"'

This should result in the app launching on Android and connecting to the apprtc
page displayed in the desktop browser.

As an alternative to the "am start" approach above, one can also send the apprtc
room URL to the Android device (e.g. using
https://chrome.google.com/webstore/detail/google-chrome-to-phone-ex/oadboiipflhobonjjffjbfekfjcgkhco)
and choose to open the URL with the AppRTCDemo app.
