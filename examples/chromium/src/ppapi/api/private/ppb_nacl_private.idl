/* Copyright (c) 2012 The Chromium Authors. All rights reserved.
 * Use of this source code is governed by a BSD-style license that can be
 * found in the LICENSE file.
 */

/* This file contains NaCl private interfaces. This interface is not versioned
 * and is for internal Chrome use. It may change without notice. */

#inline c
#include "ppapi/c/private/pp_file_handle.h"
#endinl

/**
 * The <code>PP_NaClResult</code> enum contains NaCl result codes.
 */
[assert_size(4)]
enum PP_NaClResult {
  /** Successful NaCl call */
  PP_NACL_OK = 0,
  /** Unspecified NaCl error */
  PP_NACL_FAILED = 1,
  /** Error creating the module */
  PP_NACL_ERROR_MODULE = 2,
  /** Error creating and initializing the instance */
  PP_NACL_ERROR_INSTANCE = 3
};

/** NaCl-specific errors that should be reported to the user */
enum PP_NaClError {
  /**
   *  The manifest program element does not contain a program usable on the
   *  user's architecture
  */
  PP_NACL_MANIFEST_MISSING_ARCH = 0
};

struct PP_NaClExecutableMetadata {
  /** File path of NaCl executable. This is created by the OpenNaClExecutableFd
   *  function. It is the caller's responsiblity to release it. */
  PP_Var file_path;
};

/* PPB_NaCl_Private */
interface PPB_NaCl_Private {
  /* Launches NaCl's sel_ldr process.  Returns PP_NACL_OK on success and
   * writes a NaClHandle to imc_handle. Returns PP_NACL_FAILED on failure.
   * The |enable_ppapi_dev| parameter controls whether GetInterface
   * returns 'Dev' interfaces to the NaCl plugin.  The |uses_ppapi| flag
   * indicates that the nexe run by sel_ldr will use the PPAPI APIs.
   * This implies that LaunchSelLdr is run from the main thread.  If a nexe
   * does not need PPAPI, then it can run off the main thread.
   * The |uses_irt| flag indicates whether the IRT should be loaded in this
   * NaCl process.  This is true for ABI stable nexes.
   * The |enable_dyncode_syscalls| flag indicates whether or not the nexe
   * will be able to use dynamic code system calls (e.g., mmap with PROT_EXEC).
   */
  PP_NaClResult LaunchSelLdr([in] PP_Instance instance,
                             [in] str_t alleged_url,
                             [in] PP_Bool uses_irt,
                             [in] PP_Bool uses_ppapi,
                             [in] PP_Bool enable_ppapi_dev,
                             [in] PP_Bool enable_dyncode_syscalls,
                             [out] mem_t imc_handle);

  /* This function starts the IPC proxy so the nexe can communicate with the
   * browser. Returns PP_NACL_OK on success, otherwise a result code indicating
   * the failure. PP_NACL_FAILED is returned if LaunchSelLdr wasn't called with
   * the instance. PP_NACL_ERROR_MODULE is returned if the module can't be
   * initialized. PP_NACL_ERROR_INSTANCE is returned if the instance can't be
   * initialized. PP_NACL_USE_SRPC is returned if the plugin should use SRPC.
   */
  PP_NaClResult StartPpapiProxy(PP_Instance instance);

  /* On POSIX systems, this function returns the file descriptor of
   * /dev/urandom.  On non-POSIX systems, this function returns 0.
   */
  int32_t UrandomFD();

  /* Whether the Pepper 3D interfaces should be disabled in the NaCl PPAPI
   * proxy. This is so paranoid admins can effectively prevent untrusted shader
   * code to be processed by the graphics stack.
   */
  PP_Bool Are3DInterfacesDisabled();

  /* Enables the creation of sel_ldr processes off of the main thread.
   */
  void EnableBackgroundSelLdrLaunch();

  /* This is Windows-specific.  This is a replacement for DuplicateHandle() for
   * use inside the Windows sandbox.  Note that we provide this via dependency
   * injection only to avoid the linkage problems that occur because the NaCl
   * plugin is built as a separate DLL/DSO
   * (see http://code.google.com/p/chromium/issues/detail?id=114439#c8).
   */
  int32_t BrokerDuplicateHandle([in] PP_FileHandle source_handle,
                                [in] uint32_t process_id,
                                [out] PP_FileHandle target_handle,
                                [in] uint32_t desired_access,
                                [in] uint32_t options);

  /* Returns a read-only file descriptor of a file rooted in the Pnacl
   * component directory, or an invalid handle on failure.
   * Do we want this to take a completion callback and be async, or
   * could we make this happen on another thread?
   */
  PP_FileHandle GetReadonlyPnaclFd([in] str_t filename);

  /* This creates a temporary file that will be deleted by the time
   * the last handle is closed (or earlier on POSIX systems), and
   * returns a posix handle to that temporary file.
   */
  PP_FileHandle CreateTemporaryFile([in] PP_Instance instance);

  /* Return true if we are off the record.
   */
  PP_Bool IsOffTheRecord();

  /* Return true if PNaCl is turned on.
   */
  PP_Bool IsPnaclEnabled();

  /* Display a UI message to the user. */
  PP_NaClResult ReportNaClError([in] PP_Instance instance,
                                [in] PP_NaClError message_id);

  /* Opens a NaCl executable file in the application's extension directory
   * corresponding to the file URL and returns a file descriptor, or an invalid
   * handle on failure. |metadata| is left unchanged on failure.
   */
  PP_FileHandle OpenNaClExecutable([in] PP_Instance instance,
                                   [in] str_t file_url,
                                   [out] PP_NaClExecutableMetadata metadata);
};
